{"ast":null,"code":"import { fetchAllProducts } from \"../../api/productAPIs\";\nimport { fetchAllCategories } from \"../../api/categoryAPIs\";\nexport const setFilter = category => {\n  //Note: used for filtering of products based on selected category\n  return {\n    type: \"SET_FILTER\",\n    category: category\n  };\n};\nexport const clearFilter = () => {\n  //Note: for clearing filter\n  return {\n    type: \"CLEAR_FILTER\"\n  };\n};\nexport const initCatalog = accessToken => dispatch => {\n  //Note: Initialise catalog by fetching all categories and all products\n  Promise.all([fetchAllCategories(accessToken), fetchAllProducts(accessToken)]).then(json => {\n    dispatch({\n      type: \"INIT_CATALOG\",\n      categories: json[0].data,\n      products: json[1].data\n    });\n  }).catch(() => {\n    dispatch({\n      type: \"INIT_CATALOG\",\n      categories: [\"ALL\"],\n      products: []\n    });\n  });\n};\nexport const setSortBy = sortBy => {\n  //Note: used for of products\n  return {\n    type: \"SET_SORTING\",\n    sortBy: sortBy\n  };\n};\nexport const clearAllMetadata = () => {\n  //Note: for clearing filter\n  return {\n    type: \"CLEAR_ALL\"\n  };\n};","map":{"version":3,"names":["fetchAllProducts","fetchAllCategories","setFilter","category","type","clearFilter","initCatalog","accessToken","dispatch","Promise","all","then","json","categories","data","products","catch","setSortBy","sortBy","clearAllMetadata"],"sources":["D:/Upgrad/Upgrad_Git_Sample/upGrad-Eshop-Application-main/src/store/actions/metadataAction.js"],"sourcesContent":["import {fetchAllProducts} from \"../../api/productAPIs\";\nimport {fetchAllCategories} from \"../../api/categoryAPIs\";\n\nexport const setFilter = (category) => {\n\t//Note: used for filtering of products based on selected category\n\treturn {\n\t\ttype: \"SET_FILTER\",\n\t\tcategory: category,\n\t}\n};\n\nexport const clearFilter = () => {\n\t//Note: for clearing filter\n\treturn {\n\t\ttype: \"CLEAR_FILTER\",\n\t}\n};\n\nexport const initCatalog = (accessToken) => dispatch => {\n\t//Note: Initialise catalog by fetching all categories and all products\n\tPromise.all([fetchAllCategories(accessToken), fetchAllProducts(accessToken)]).then(json => {\n\t\tdispatch({\n\t\t\ttype: \"INIT_CATALOG\",\n\t\t\tcategories: json[0].data,\n\t\t\tproducts: json[1].data,\n\t\t});\n\t}).catch(() => {\n\t\tdispatch({\n\t\t\ttype: \"INIT_CATALOG\",\n\t\t\tcategories: [\"ALL\"],\n\t\t\tproducts: [],\n\t\t});\n\t});\n};\n\nexport const setSortBy = (sortBy) => {\n\t//Note: used for of products\n\treturn {\n\t\ttype: \"SET_SORTING\",\n\t\tsortBy: sortBy,\n\t}\n};\n\nexport const clearAllMetadata = () => {\n\t//Note: for clearing filter\n\treturn {\n\t\ttype: \"CLEAR_ALL\",\n\t}\n};"],"mappings":"AAAA,SAAQA,gBAAgB,QAAO,uBAAuB;AACtD,SAAQC,kBAAkB,QAAO,wBAAwB;AAEzD,OAAO,MAAMC,SAAS,GAAIC,QAAQ,IAAK;EACtC;EACA,OAAO;IACNC,IAAI,EAAE,YAAY;IAClBD,QAAQ,EAAEA;EACX,CAAC;AACF,CAAC;AAED,OAAO,MAAME,WAAW,GAAGA,CAAA,KAAM;EAChC;EACA,OAAO;IACND,IAAI,EAAE;EACP,CAAC;AACF,CAAC;AAED,OAAO,MAAME,WAAW,GAAIC,WAAW,IAAKC,QAAQ,IAAI;EACvD;EACAC,OAAO,CAACC,GAAG,CAAC,CAACT,kBAAkB,CAACM,WAAW,CAAC,EAAEP,gBAAgB,CAACO,WAAW,CAAC,CAAC,CAAC,CAACI,IAAI,CAACC,IAAI,IAAI;IAC1FJ,QAAQ,CAAC;MACRJ,IAAI,EAAE,cAAc;MACpBS,UAAU,EAAED,IAAI,CAAC,CAAC,CAAC,CAACE,IAAI;MACxBC,QAAQ,EAAEH,IAAI,CAAC,CAAC,CAAC,CAACE;IACnB,CAAC,CAAC;EACH,CAAC,CAAC,CAACE,KAAK,CAAC,MAAM;IACdR,QAAQ,CAAC;MACRJ,IAAI,EAAE,cAAc;MACpBS,UAAU,EAAE,CAAC,KAAK,CAAC;MACnBE,QAAQ,EAAE;IACX,CAAC,CAAC;EACH,CAAC,CAAC;AACH,CAAC;AAED,OAAO,MAAME,SAAS,GAAIC,MAAM,IAAK;EACpC;EACA,OAAO;IACNd,IAAI,EAAE,aAAa;IACnBc,MAAM,EAAEA;EACT,CAAC;AACF,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EACrC;EACA,OAAO;IACNf,IAAI,EAAE;EACP,CAAC;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}